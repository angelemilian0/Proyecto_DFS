// ==================== CONFIGURACI√ìN ====================
let currentPage = 1;
const limit = 5; // N√∫mero de usuarios por p√°gina
const API_URL = '/api/usuarios'; // ‚úÖ Asegurar que solo est√° declarada una vez

// ‚úÖ Cargar usuarios desde la API
async function cargarUsuarios(page = 1) {
    try {
        console.log(`üìå Intentando cargar usuarios para la p√°gina ${page}...`);

        const token = localStorage.getItem('token');
        if (!token) {
            alert("No est√°s autenticado. Inicia sesi√≥n nuevamente.");
            window.location.href = "login.html";
            return;
        }

        const response = await fetch(`${API_URL}/all?page=${page}&limit=${limit}`, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Accept': 'application/json'
            }
        });

        if (!response.ok) {
            const data = await response.json();
            throw new Error(data.error || 'Error al obtener usuarios');
        }

        const data = await response.json();
        console.log("‚úÖ Usuarios obtenidos:", data);

        if (!Array.isArray(data.usuarios) || data.usuarios.length === 0) {
            console.warn("‚ö† No hay usuarios en esta p√°gina.");
            document.getElementById('listaUsuarios').innerHTML = `<tr><td colspan="3">No hay usuarios</td></tr>`;
            return;
        }

        // ‚úÖ Limpiar la tabla antes de agregar nuevos datos
        const listaUsuarios = document.getElementById('listaUsuarios');
        listaUsuarios.innerHTML = '';

        // ‚úÖ Insertar cada usuario en la tabla
        data.usuarios.forEach(usuario => {
            console.log(`üë§ Agregando usuario: ${usuario.nombre} (${usuario.email})`);
            const tr = document.createElement('tr');
            tr.innerHTML = `
                <td>${usuario.nombre}</td>
                <td>${usuario.email}</td>
                <td>
                    <button onclick="editarUsuario('${usuario._id}')">Editar</button>
                    <button onclick="eliminarUsuario('${usuario._id}')" style="background-color: red;">Eliminar</button>
                </td>
            `;
            listaUsuarios.appendChild(tr);
        });

        // ‚úÖ Actualizar variables de paginaci√≥n
        currentPage = data.currentPage; 
        window.totalPages = data.totalPages || 1;
        console.log(`üìå P√°gina actualizada: ${currentPage} de ${window.totalPages}`);

        // ‚úÖ Actualizar la UI de paginaci√≥n
        document.getElementById('paginaActual').textContent = `P√°gina ${currentPage} de ${window.totalPages}`;
        document.getElementById('btnAnterior').disabled = (currentPage <= 1);
        document.getElementById('btnSiguiente').disabled = (currentPage >= window.totalPages);

    } catch (error) {
        console.error('‚ùå Error al cargar usuarios:', error);
        alert(`Error: ${error.message}`);
    }
}

// ‚úÖ Configurar eventos de los botones de paginaci√≥n
document.addEventListener("DOMContentLoaded", () => {
    console.log("üöÄ Cargando usuarios desde dashboard.js...");
    cargarUsuarios(1); // ‚úÖ Cargar la primera p√°gina al iniciar

    document.getElementById('btnSiguiente').addEventListener('click', () => {
        if (currentPage < window.totalPages) {
            currentPage++; // ‚úÖ Avanzar la p√°gina correctamente
            console.log(`‚û°Ô∏è Avanzando a la p√°gina ${currentPage}`);
            cargarUsuarios(currentPage);
        } else {
            console.warn("‚ö† Ya est√°s en la √∫ltima p√°gina.");
        }
    });

    document.getElementById('btnAnterior').addEventListener('click', () => {
        if (currentPage > 1) {
            currentPage--; // ‚úÖ Retroceder la p√°gina correctamente
            console.log(`‚¨ÖÔ∏è Retrocediendo a la p√°gina ${currentPage}`);
            cargarUsuarios(currentPage);
        } else {
            console.warn("‚ö† Ya est√°s en la primera p√°gina.");
        }
    });
});
